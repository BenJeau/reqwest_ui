// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

export const commands = {
  async executeRequest(
    request: Request,
  ): Promise<
    __Result__<
      {
        method: Method;
        url: string;
        status: number;
        body: string;
        timing: ResponseTiming;
        headers: [string | null, string][];
        remote_addr: string | null;
        version: HttpVersion;
        content_length: number;
      },
      null
    >
  > {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("plugin:tauri-specta|execute_request", {
          request,
        }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
};

/** user-defined types **/

export type ClientOptions = {
  request_timeout_ms?: number;
  connect_timeout_ms?: number;
  http_version?: HttpVersion;
  accept_invalid_certs?: boolean;
  max_redirects?: number | null;
  https_only?: boolean;
  proxy?: Proxy | null;
  user_agent?: string;
  disable_brotli?: boolean;
  disable_gzip?: boolean;
  disable_deflate?: boolean;
};
export type HttpVersion = "Http09" | "Http10" | "Http11" | "H2" | "H3";
export type Method =
  | "GET"
  | "POST"
  | "PUT"
  | "DELETE"
  | "PATCH"
  | "HEAD"
  | "OPTIONS";
export type Proxy = { policy: ProxyPolicy; no: string | null };
export type ProxyPolicy =
  | { type: "HTTP"; content: string }
  | { type: "HTTPS"; content: string }
  | { type: "ALL"; content: string };
export type Request = {
  method: Method;
  url: string;
  body: string | null;
  headers: { [key in string]: string };
  options?: ClientOptions;
};
export type ResponseTiming = {
  client_creation: number;
  request_creation: number;
  response: number;
  text_parsing: number;
};

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from "@tauri-apps/api";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindowHandle as __WebviewWindowHandle__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
